{"version":3,"sources":["component/Navbar/Navbar.tsx","component/News/News.tsx","component/Music/Music.tsx","component/Settings/Settings.tsx","component/Dialogs/DialogItem/DialogItem.tsx","component/Dialogs/Message/Message.tsx","component/Dialogs/AddMessageForm/AddMessageForm.tsx","redux/dialogs-reducer.tsx","component/Dialogs/AddMessageForm/AddMessageFormContainer.tsx","hoc/withAuthNavigate.tsx","component/Dialogs/DialogContainer.tsx","component/Dialogs/Dialogs.tsx","api/Api.tsx","redux/users-reducer.tsx","assests/images/young-user-icon_5f450e6354e9e.png","component/Users/Users.tsx","assests/images/preloader.gif","common/Preloader.tsx","redux/users-selrctors.tsx","component/Users/UsersContainer.tsx","component/Profile/ProfileInfo/ProfileStatus.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx","component/Profile/MyPosts/Post/Post.tsx","redux/profile-reducer.tsx","component/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","component/Profile/MyPosts/AddNewPostForm/AddNewPostFormContainer.tsx","component/Profile/MyPosts/MyPostContainer.tsx","component/Profile/MyPosts/MyPosts.tsx","component/Profile/Profile.tsx","component/Profile/ProfileContainer.tsx","hoc/whithParams.tsx","component/Header/Header.tsx","redux/auth-reducer.tsx","component/Header/HeaderComponent.tsx","component/Login/LoginContainer.tsx","component/Login/Login.tsx","redux/app-reducer.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.tsx","index.tsx","component/Navbar/Navbar.module.css","component/Dialogs/Dialogs.module.css","component/Dialogs/DialogItem/DialogItem.module.css","component/Users/Users.module.css","component/Profile/MyPosts/MyPosts.module.css","component/Header/Header.module.css","component/Dialogs/Message/Message.module.css","component/Profile/ProfileInfo/ProfileInfo.module.css","component/Profile/MyPosts/Post/Post.module.css"],"names":["Navbar","className","s","nav","item","to","isActive","active","News","Music","Settings","DialogItems","props","dialog","id","name","Messages","message","AddMessageForm","formik","useFormik","initialValues","newMessage","onSubmit","values","sendMessage","resetForm","handleSubmit","placeholder","onChange","handleChange","value","type","SEND_MESSAGE","initialState","dialogs","messages","dialogsReducer","state","action","body","AddMessageFormComponent","this","React","Component","AddMessageFormContainer","connect","mapStateToProps","isAuth","authMe","withAuthNavigate","restProps","DialogContainer","dialogsPage","dialogsElement","map","d","messagesElement","m","dialogItems","instance","axios","create","baseURL","withCredentials","headers","userAPI","currentPage","pageSize","get","post","profileAPI","userId","status","put","authAPI","data","delete","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOW_PROGRESS","users","totalCount","error","isFetching","followingInProgress","follow","unfollow","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","setToggleFollowingProgress","usersReducer","u","followed","filter","Users","pageCount","Math","ceil","pages","i","push","p","selectedPage","onClick","onPageChange","src","photos","small","userPhoto","alt","usersPhoto","disabled","some","unfollowTC","followTC","Preloader","preloader","getUsers","createSelector","usersPage","getTotalUserCount","getPageSize","getCurrentPage","getIsFetching","getFollowingInProgress","UsersAPIComponent","pageNumber","getUsersTC","UsersContainer","dispatch","then","res","items","resultCode","ProfileStatus","editMode","activateEditMode","setState","deActivateEditMode","updateStatusTC","onStatusChange","e","currentTarget","prevProps","prevState","snapshot","console","log","autoFocus","onBlur","onDoubleClick","ProfileInfo","profile","description","large","Post","likesCounts","ADD_POST","SET_USER_PROFILE","SET_STATUS","newPostText","posts","addPostAC","setUserProfile","setStatus","profileReducer","AddNewPostForm","addPost","AddNewPostFormComponent","MyPostContainer","profilePage","postElements","postsBlock","Profile","ProfileComponent","getUsersProfileTC","getStatusTC","ProfileContainer","useParams","Header","style","header","loginBlock","color","login","logoutTC","SET_USER_DATA","SET_IS_AUTH","email","setAuthUserData","setIsAuth","HeaderComponent","HeaderContainer","LoginContainer","loginTC","useDispatch","password","rememberMe","validate","errors","test","length","Grid","container","justifyContent","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","FormControlLabel","control","Checkbox","checked","Button","variant","INITIALIZED_SUCCESS","initialized","App","initializeAppTC","path","element","AppContainer","app","a","Error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1bda5ce2.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to='/profile' className={({ isActive }) =>(isActive ?  s.active : \"\")}>Profile</NavLink>\r\n            </div>\r\n            <div  className={s.item}>\r\n                <NavLink to={'/dialogs'} className={({ isActive }) =>(isActive ?  s.active : \"\")}>Messages</NavLink>\r\n            </div>\r\n            <div  className={s.item}>\r\n                <NavLink to={'/users'} className={({ isActive }) =>(isActive ?  s.active : \"\")}>Users</NavLink>\r\n            </div>\r\n            <div  className={s.item}>\r\n                <NavLink to={'/news'} className={({ isActive }) =>(isActive ?  s.active : \"\")}>News</NavLink>\r\n            </div>\r\n            <div  className={s.item}>\r\n                <NavLink to={'/music'} className={({ isActive }) =>(isActive ?  s.active : \"\")}>Music</NavLink>\r\n            </div>\r\n            <div  className={s.item}>\r\n                <NavLink to={'/settings'} className={({ isActive }) =>(isActive ?  s.active : \"\")}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\n\r\nexport const News =()=>{\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\n\r\nexport const Music =()=>{\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\n\r\nexport const Settings =()=>{\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './DialogItem.module.css'\r\n\r\ntype DialogItemsPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItems = (props: DialogItemsPropsType) => {\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={'/dialogs' + props.id}>{props.name}</NavLink>\r\n    </div>\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './Message.module.css'\r\n\r\n\r\ntype MessagesTypeProps = {\r\n    message: string\r\n}\r\nexport const Messages = (props: MessagesTypeProps) => {\r\n    return <div className={s.message}>\r\n        {props.message}\r\n    </div>\r\n}\r\n","import {useFormik} from \"formik\";\r\nimport React from \"react\";\r\n\r\ntype AddMessageFormType = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\n\r\nexport const AddMessageForm = (props: AddMessageFormType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newMessage: '',\r\n        },\r\n        onSubmit: values => {\r\n            props.sendMessage(values.newMessage)\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div><textarea placeholder='Enter text'\r\n                           name='newMessage'\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.newMessage}\r\n            >\r\n            </textarea>\r\n            </div>\r\n            <div>\r\n                <button type={'submit'}>\r\n                  Add Message\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","// const UPDATE_NEW_MESSAGE_TEXT = 'UPDATE_NEW_MESSAGE_TEXT'\r\nconst SEND_MESSAGE = 'SEND_MESSAGE'\r\n\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport  type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsPropsType = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n    // newMessage: string\r\n}\r\n\r\nlet initialState: DialogsPropsType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Oleg'},\r\n        {id: 2, name: 'Dimas'},\r\n        {id: 3, name: 'Any'},\r\n        {id: 4, name: 'Ilia'},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'How are you'},\r\n        {id: 2, message: 'How are you'},\r\n        {id: 3, message: 'How are you'},\r\n    ],\r\n    // newMessage: \"\"\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: DialogsActionType) => {\r\n    // let stateCopy =  {\r\n    //     ...state,\r\n    //     // messages: [...state.messages]\r\n    // }\r\n    switch (action.type) {\r\n        case SEND_MESSAGE :\r\n            let body = action.newMessage;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 4, message: body}],\r\n                newMessage: ''\r\n            }\r\n        // case UPDATE_NEW_MESSAGE_TEXT :\r\n        //     return {\r\n        //         ...state,\r\n        //         newMessage : action.body\r\n        //     }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport type SendMessageType = ReturnType<typeof sendMessage>\r\nexport const sendMessage = (newMessage: string) => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        newMessage\r\n    }\r\n}\r\n// export type UpdateNewMessageTexType = ReturnType<typeof updateNewMessageText>\r\n// export const updateNewMessageText = (body: string) => {\r\n//     return {\r\n//         type: UPDATE_NEW_MESSAGE_TEXT,\r\n//         body\r\n//     }\r\n// }\r\nexport type DialogsActionType = SendMessageType\r\n\r\nexport default dialogsReducer;","import React from \"react\";\r\nimport {AddMessageForm} from \"./AddMessageForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {sendMessage} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\ntype MSTP = {}\r\n\r\ntype MDTP = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\n\r\nexport type AddMessageFormComponentType = MSTP & MDTP\r\n\r\nclass AddMessageFormComponent extends React.Component<AddMessageFormComponentType> {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AddMessageForm sendMessage={this.props.sendMessage}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapSteToProps = (state: AppStateType): MSTP => {\r\n    return {}\r\n}\r\n\r\nexport const AddMessageFormContainer = connect<MSTP, MDTP, {}, AppStateType>(mapSteToProps,\r\n    {sendMessage})(AddMessageFormComponent)","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MSTP  = {\r\n    isAuth: boolean\r\n}\r\ntype MDTP = {\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):MSTP => {\r\n    return {\r\n        isAuth: state.authMe.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthNavigate<T>(Component: ComponentType<T>) {\r\n    function NavigateContainer(props: MSTP) {\r\n        let {isAuth,...restProps}=props\r\n        if (!props.isAuth) return <Navigate to={'/login'}/>\r\n        return <Component {...restProps as T }/>\r\n    }\r\n\r\n    return connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps)(NavigateContainer)\r\n\r\n}\r\n","import React from \"react\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {DialogsPropsType, sendMessage} from \"../../redux/dialogs-reducer\";\r\nimport {withAuthNavigate} from \"../../hoc/withAuthNavigate\";\r\n//\r\n//\r\n// export type DialogsProps = {\r\n//     // newMessage  : DialogsPropsType\r\n// }\r\n\r\n// export const DialogContainer = (props: DialogsProps) => {\r\n//\r\n// return (\r\n//     <StoreContext.Consumer>\r\n//         {\r\n//             (store: any) => {\r\n//                 let state = store.getState()\r\n//\r\n//                 let onSendMessageClick = () => {\r\n//                     store.dispatch(sendMessageAC())\r\n//                 }\r\n//                 let onUpdateNewMessageChange = (newMessage: string) => {\r\n//                     store.dispatch(updateNewMessageTextAC(newMessage))\r\n//                 }\r\n//                 return <Dialogs state={state}\r\n//                                 onSendMessageClick={onSendMessageClick}\r\n//                                 onUpdateNewMessageChange={onUpdateNewMessageChange}/>\r\n//\r\n//             }\r\n//         }\r\n//     </StoreContext.Consumer>\r\n// )\r\n\r\n\r\n// }\r\n\r\ntype MSTP = {\r\n    dialogsPage: DialogsPropsType\r\n}\r\n\r\n\r\ntype MDTP = {\r\n    sendMessage: (newMessage:string) => void\r\n    // updateNewMessageText: (newMessage: string) => void\r\n}\r\n\r\nlet mapSteToProps = (state: AppStateType): MSTP => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport const DialogContainer = connect<MSTP, MDTP, {}, AppStateType>(mapSteToProps, {\r\n    sendMessage,\r\n    // updateNewMessageText\r\n\r\n})(withAuthNavigate(Dialogs));\r\n\r\n// export const DialogContainer = compose<React.ComponentType>(\r\n//     connect<MSTP, MDTP, {}, AppStateType>(mapSteToProps, {\r\n//         sendMessage, updateNewMessageText\r\n//     }),\r\n//     withAuthNavigate\r\n//     (Dialogs)\r\n// )\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItems} from \"./DialogItem/DialogItem\";\r\nimport {Messages} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"../../redux/dialogs-reducer\";\r\nimport {AddMessageFormContainer} from \"./AddMessageForm/AddMessageFormContainer\";\r\n\r\nexport type DialogsProps = {\r\n    sendMessage: (newMessage: string) => void\r\n    updateNewMessageText: (newMessage: string) => void\r\n    dialogsPage: DialogsPropsType\r\n    isAuth: boolean\r\n\r\n}\r\n\r\nexport const Dialogs = (props: DialogsProps) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElement = state.dialogs.map((d) => <DialogItems key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElement = state.messages.map((m) => <Messages key={m.id} message={m.message}/>)\r\n    // let newMessage = state.newMessage\r\n    //\r\n    // let onSendMessageClickHandler = () => {\r\n    //     props.sendMessage()\r\n    //\r\n    // }\r\n\r\n    // let onUpdateNewMessageChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     newMessage = e.currentTarget.value\r\n    //     props.updateNewMessageText(newMessage)\r\n    // }\r\n    // if(!props.isAuth) return <Navigate to={ '/login'}/>\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n                <div>\r\n                    {/*<div>*/}\r\n                    {/*    <textarea placeholder='Enter text' value={newMessage}*/}\r\n                    {/*              onChange={onUpdateNewMessageChangeHandler}> </textarea>*/}\r\n                    {/*</div>*/}\r\n                    {/*<div>*/}\r\n                    {/*    <button onClick={onSendMessageClickHandler}>*/}\r\n                    {/*        Send*/}\r\n                    {/*    </button>*/}\r\n                    {/*</div>*/}\r\n                    <AddMessageFormContainer/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport axios, {AxiosResponse} from \"axios\";\r\nimport {ProfileType} from \"../redux/profile-reducer\";\r\nimport {AuthMeType} from \"../redux/auth-reducer\";\r\n\r\n\r\nlet instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '5883697e-1933-44d6-978d-c735fd6eee7a'\r\n    }\r\n})\r\nexport const userAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage} &count${pageSize}`)\r\n    },\r\n    postFollow(id: number) {\r\n        return instance.post(`follow/${id}`)\r\n    },\r\n    deleteUnfollow(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: string) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<AuthMeType,AxiosResponse<ResponseType<{login:string,id:number,email:string}>>>(`auth/me`)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: string }>>>(`/auth/login`, data)\r\n\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`/auth/login`)\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}","import {Dispatch} from \"redux\";\r\nimport {userAPI} from \"../api/Api\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_USERS_COUNT'\r\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOW_PROGRESS = 'TOGGLE_FOLLOW_IS_PROGRESS'\r\n\r\n\r\nexport type UsersType = {\r\n    name: string,\r\n    id: number,\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    status: string | null,\r\n    followed: boolean\r\n}\r\n\r\nexport  type UsersTypeProps = {\r\n    users: UsersType[]\r\n    totalCount: number\r\n    error: string\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\nlet initialState: UsersTypeProps = {\r\n    users: [],\r\n    totalCount: 0,\r\n    pageSize: 5,\r\n    currentPage: 1,\r\n    error: '',\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: UsersActionType) => {\r\n    switch (action.type) {\r\n\r\n        case FOLLOW :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case UNFOLLOW :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case SET_USERS :\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE :\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n\r\n        case SET_TOTAL_COUNT:\r\n            return {\r\n                ...state, totalCount: action.totalCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOW_PROGRESS:\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type FollowType = ReturnType<typeof follow>\r\nexport const follow = (userId: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport type UnfollowType = ReturnType<typeof unfollow>\r\nexport const unfollow = (userId: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport type SetUsersType = ReturnType<typeof setUsers>\r\nexport const setUsers = (users: UsersType[]) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    } as const\r\n}\r\n\r\nexport type SetUsersCountType = ReturnType<typeof setCurrentPage>\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    } as const\r\n}\r\n\r\nexport type SetTotalCountType = ReturnType<typeof setTotalUsersCount>\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_COUNT,\r\n        totalCount\r\n    } as const\r\n}\r\n\r\n\r\nexport type ToggleIsFetchingType = ReturnType<typeof toggleIsFetching>\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n}\r\n\r\nexport type SetToggleFollowingProgressType = ReturnType<typeof setToggleFollowingProgress>\r\nexport const setToggleFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n\r\n        type: TOGGLE_IS_FOLLOW_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n}\r\n\r\n\r\nexport const getUsersTC = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        userAPI.getUsers(currentPage, pageSize)\r\n            .then(res => {\r\n                dispatch(toggleIsFetching(false))\r\n                dispatch(setCurrentPage(currentPage))\r\n                dispatch(setUsers(res.data.items))\r\n                dispatch(setTotalUsersCount(res.data.totalCount))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const followTC = (id: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setToggleFollowingProgress(true, id))\r\n        userAPI.postFollow(id).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                follow(id)\r\n            }\r\n            dispatch(setToggleFollowingProgress(false, id))\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const unfollowTC = (id: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setToggleFollowingProgress(true, id))\r\n        userAPI.postFollow(id).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                unfollow(id)\r\n            }\r\n            dispatch(setToggleFollowingProgress(false, id))\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport type UsersActionType =\r\n    FollowType\r\n    | UnfollowType\r\n    | SetUsersType\r\n    | SetUsersCountType\r\n    | SetTotalCountType\r\n    | ToggleIsFetchingType\r\n    | SetToggleFollowingProgressType\r\n\r\nexport default usersReducer;\r\n","export default __webpack_public_path__ + \"static/media/young-user-icon_5f450e6354e9e.4ce1ce10.png\";","import React from \"react\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport userPhoto from './../../assests/images/young-user-icon_5f450e6354e9e.png'\r\nimport s from './Users.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype UsersTypeProps = {\r\n    users: UsersType[]\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChange: (pageNumber: number) => void\r\n    setToggleFollowingProgress: (isFetch: boolean,userId:number) => void\r\n    followingInProgress: number[]\r\n    isFetching: boolean\r\n    followTC : (id: number) =>void\r\n    unfollowTC : (id: number) =>void\r\n\r\n}\r\n\r\nexport const Users = (props: UsersTypeProps) => {\r\n\r\n    let pageCount = Math.ceil(props.totalCount / props.pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {\r\n                    pages.map(p => {\r\n                        return <span\r\n                            className={props.currentPage === p ? s.selectedPage : ''}\r\n                            onClick={() => {\r\n                                props.onPageChange(p)\r\n                            }\r\n                            }>{p + '...'}</span>\r\n                    })\r\n                }\r\n            </div>\r\n            {\r\n                props.users.map(u =>\r\n                    <div key={u.id}>\r\n                      <span>\r\n                          <div>\r\n                              <NavLink to={'/profile/' + u.id}> <img key={u.id}\r\n                                                                     src={u.photos.small !== null\r\n                                                                         ? u.photos.small\r\n                                                                         : userPhoto}\r\n                                                                     alt={'image'}\r\n                                                                     className={s.usersPhoto}\r\n                              /></NavLink>\r\n                          </div>\r\n                          <div>\r\n                              {u.followed\r\n                                  ? <button disabled={props.followingInProgress.some(id=> id===u.id)}\r\n                                            onClick={() => {\r\n                                                props.unfollowTC(u.id)\r\n                                                // props.setToggleFollowingProgress(true,u.id)\r\n                                                // // axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,\r\n                                                // //     {\r\n                                                // //         withCredentials: true,\r\n                                                // //         headers: {\r\n                                                // //             'API-KEY': '5883697e-1933-44d6-978d-c735fd6eee7a'\r\n                                                // //         }\r\n                                                // //     })\r\n                                                //\r\n                                                // userAPI.deleteUnfollow(u.id).then(res => {\r\n                                                //     if (res.data.resultCode === 0) {\r\n                                                //         props.unfollow(u.id)\r\n                                                //     }\r\n                                                //     props.setToggleFollowingProgress(false,u.id)\r\n                                                // })\r\n\r\n                                            }}>Unfollow</button>\r\n                                  : <button disabled={props.followingInProgress.some(id=> id===u.id)}\r\n                                            onClick={() => {\r\n                                                props.followTC(u.id)\r\n                                                // props.setToggleFollowingProgress(true,u.id)\r\n                                                // //     axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,\r\n                                                // // {}, {\r\n                                                // //     withCredentials: true,\r\n                                                // //     headers: {\r\n                                                // //     'API-KEY': '5883697e-1933-44d6-978d-c735fd6eee7a'\r\n                                                // // }\r\n                                                // // })\r\n                                                // userAPI.postFollow(u.id).then(res => {\r\n                                                //     if (res.data.resultCode === 0) {\r\n                                                //         props.follow(u.id)\r\n                                                //     }\r\n                                                //     props.setToggleFollowingProgress(false,u.id)\r\n                                                // })\r\n\r\n                                            }}>Follow</button>\r\n                              }\r\n                                  </div>\r\n                                  </span>\r\n                        <span>\r\n                                  <span>\r\n                                  <div>{u.name}</div>\r\n                                  <div>{u.status}</div>\r\n                                  </span>\r\n                                  <span>\r\n                                  <div>{\"u.location.city\"}</div>\r\n                                  <div>{\"u.location.country\"}</div>\r\n                                  </span>\r\n                                  </span>\r\n                    </div>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/preloader.c7d9f081.gif\";","import React from \"react\";\r\nimport preloader from \"../assests/images/preloader.gif\";\r\n\r\ntype PreloaderPropsType = {}\r\n\r\nexport let Preloader = (props: PreloaderPropsType) => {\r\n    return <div>\r\n        <img src={preloader} alt={''}/>\r\n    </div>\r\n\r\n}","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers =createSelector(getUsersSelector,(users)=>{\r\n    return users.filter(u=>true)\r\n})\r\n\r\nexport const getTotalUserCount = (state: AppStateType) => {\r\n    return state.usersPage.totalCount\r\n}\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return  state.usersPage.pageSize\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return  state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching= (state: AppStateType) => {\r\n    return  state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return  state.usersPage.followingInProgress\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    follow,\r\n    followTC,\r\n    getUsersTC,\r\n    setCurrentPage,\r\n    setToggleFollowingProgress,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleIsFetching,\r\n    unfollow,\r\n    unfollowTC,\r\n    UsersType\r\n} from \"../../redux/users-reducer\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../../common/Preloader\";\r\nimport {withAuthNavigate} from \"../../hoc/withAuthNavigate\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUserCount,\r\n    getUsers\r\n} from \"../../redux/users-selrctors\";\r\n\r\ntype MSTP = {\r\n    users: UsersType[]\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\ntype MDTP = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: UsersType[]) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalUserCount: number) => void\r\n    toggleIsFetching: (isFetch: boolean) => void\r\n    setToggleFollowingProgress: (isFetch: boolean, userId: number) => void\r\n    getUsersTC: (currentPage: number, pageSize: number) => void\r\n    followTC: (id: number) => void\r\n    unfollowTC: (id: number) => void\r\n}\r\nexport type UsersAPITypeProps = MDTP & MSTP\r\n\r\nexport class UsersAPIComponent extends React.Component<UsersAPITypeProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersTC(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChange = (pageNumber: number) => {\r\n        this.props.getUsersTC(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        // if (!this.props.isAuth) return <Navigate to={'/login'}/>\r\n        return <>\r\n            <div>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n            </div>\r\n            <Users onPageChange={this.onPageChange}\r\n                   currentPage={this.props.currentPage}\r\n                   pageSize={this.props.pageSize}\r\n                   totalCount={this.props.totalCount}\r\n                   unfollow={this.props.unfollow}\r\n                   follow={this.props.follow}\r\n                   users={this.props.users}\r\n                   setToggleFollowingProgress={this.props.setToggleFollowingProgress}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   isFetching={this.props.isFetching}\r\n                   followTC={this.props.followTC}\r\n                   unfollowTC={this.props.unfollowTC}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MSTP => {\r\n    return {\r\n        users: getUsers(state),\r\n        totalCount: getTotalUserCount(state),\r\n        pageSize: getPageSize(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching:getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\nexport const UsersContainer = connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps,\r\n    {\r\n        follow, unfollow, setUsers,\r\n        setCurrentPage, setTotalUsersCount, toggleIsFetching,\r\n        setToggleFollowingProgress, getUsersTC, followTC, unfollowTC\r\n    })(withAuthNavigate(UsersAPIComponent))\r\n// export const UsersContainer = compose<React.ComponentType>(\r\n//     withAuthNavigate,\r\n//     connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps,\r\n//         {\r\n//             follow, unfollow, setUsers,\r\n//             setCurrentPage, setTotalUsersCount, toggleIsFetching,\r\n//             setToggleFollowingProgress, getUsersTC, followTC, unfollowTC\r\n//         }),\r\n//     (UsersAPIComponent))","import React, {ChangeEvent} from \"react\";\r\n\r\ntype ProfileStatusTypeProps = {\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusTypeProps> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState(\r\n            {editMode: true})\r\n    }\r\n\r\n    deActivateEditMode = () => {\r\n        this.setState(\r\n            {editMode: false})\r\n        this.props.updateStatusTC(this.state.status)\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState(\r\n            {status: e.currentTarget.value})\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusTypeProps>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.status !== this.props.status){\r\n            this.setState(\r\n                {status: this.props.status})\r\n        }\r\n\r\n        console.log('componentDidUpdate')\r\n    }\r\n\r\n    render() {\r\n        console.log('render')\r\n        return <div>\r\n\r\n            {!this.state.editMode ?\r\n                <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"----\"}</span>\r\n                </div>\r\n                : <div>\r\n                    <input autoFocus={true} onBlur={this.deActivateEditMode} onChange={this.onStatusChange}\r\n                           value={this.state.status}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Preloader} from \"../../../common/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile:ProfileType\r\n    status:string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo = (props:ProfileInfoPropsType) => {\r\n    if(!props.profile){\r\n      return   <Preloader/>\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div>\r\n                {/*<img src='https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__480.jpg' alt={'images'}/>*/}\r\n                <div className={s.description}>\r\n                    <NavLink to={'/profile'}>\r\n                       <img src={props.profile.photos.large} alt={'profile photo'}/>\r\n                        </NavLink>\r\n                    <div>\r\n                        <ProfileStatus  status={props.status}  updateStatusTC={props.updateStatusTC} />\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype  PostPropsType = {\r\n    messages: string\r\n    likesCounts: number\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTFb5fMw2UHXHnnNcW6t2Dpa7A_Ubc-9sTvEA&usqp=CAU'} alt={'photo'}/>\r\n            {props.messages}\r\n            <div>\r\n                <span>like</span> {props.likesCounts}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {profileAPI} from \"../api/Api\";\r\n\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_ TEXT'\r\nconst ADD_POST = 'ADD_POST'\r\nconst SET_USER_PROFILE = 'SET_USERS_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        facebook: string,\r\n        \"website\": null,\r\n        \"vk\": string,\r\n        \"twitter\": string,\r\n        \"instagram\": string,\r\n        \"youtube\": null,\r\n        \"github\": string,\r\n        \"mainLink\": null\r\n    },\r\n    \"lookingForAJob\": true,\r\n    \"lookingForAJobDescription\": string,\r\n    \"fullName\": string,\r\n    \"userId\": number,\r\n    \"photos\": {\r\n        \"small\": string,\r\n        \"large\": string\r\n    }\r\n} | null\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCounts: number\r\n}\r\n\r\nexport type PostTypeProps = {\r\n    posts: PostType[]\r\n    newPostText: string\r\n    profile: ProfileType\r\n    status: string\r\n}\r\n\r\nlet initialState: PostTypeProps = {\r\n    newPostText: \"\",\r\n    posts: [\r\n        {id: 1, message: 'Hi my friend', likesCounts: 20},\r\n        {id: 2, message: 'How are you', likesCounts: 15},\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionType) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST :\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: 5, message: action.newPostText, likesCounts: 12,}],\r\n                newPostText: ''\r\n            }\r\n        //\r\n        // case UPDATE_NEW_POST_TEXT :\r\n        //     return {\r\n        //         ...state,\r\n        //         newPostText: action.newText\r\n        //     }\r\n        case SET_USER_PROFILE :\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_STATUS :\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n\r\n        default  :\r\n            return state\r\n    }\r\n}\r\nexport type AddPostType = ReturnType<typeof addPostAC>\r\nexport const addPostAC = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText\r\n    }\r\n}\r\n\r\n// export type UpdateNewPostTexType = ReturnType<typeof updateNewPostTextAC>\r\n// export const updateNewPostTextAC = (newText: string) => {\r\n//     return {\r\n//         type: UPDATE_NEW_POST_TEXT,\r\n//         newText\r\n//     }\r\n// }\r\n\r\nexport type SetUserProfileType = ReturnType<typeof setUserProfile>\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    }\r\n}\r\n\r\nexport type SetStatusType = ReturnType<typeof setStatus>\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    }\r\n}\r\n\r\n\r\nexport const getUsersProfileTC = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getUserProfile(userId).then(res => {\r\n            dispatch(setUserProfile(res.data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const getStatusTC = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getStatus(userId).then(res => {\r\n            dispatch(setStatus(res.data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateStatusTC = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatus(status).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport type ProfileActionType = AddPostType & SetUserProfileType & SetStatusType\r\nexport default profileReducer;","import {useFormik} from \"formik\";\r\nimport React from \"react\";\r\n\r\ntype AddNewPostFormType = {\r\n    addPost: (newPostText: string) =>void\r\n}\r\n\r\nexport const AddNewPostForm = (props: AddNewPostFormType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPostText: '',\r\n        },\r\n        onSubmit: values => {\r\n            props.addPost(values.newPostText)\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div><textarea placeholder='Enter post'\r\n                           name='newPostText'\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.newPostText}\r\n            >\r\n            </textarea>\r\n            </div>\r\n            <div>\r\n                <button type={'submit'}>\r\n                    Add Post\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPostAC} from \"../../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {AddNewPostForm} from \"./AddNewPostForm\";\r\n\r\n\r\ntype MSTP = {}\r\n\r\ntype MDTP = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type AddNewPostFormComponentType = MSTP & MDTP\r\n\r\nclass AddNewPostFormComponent extends React.Component<AddNewPostFormComponentType> {\r\n    componentDidMount() {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AddNewPostForm addPost={this.props.addPost}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapSteToProps = (state: AppStateType): MSTP => {\r\n    return {}\r\n}\r\n\r\nexport const AddMessageFormContainer = connect<MSTP, MDTP, {}, AppStateType>(mapSteToProps,\r\n    {addPost: addPostAC})(AddNewPostFormComponent)","import React from 'react';\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostAC, PostType} from \"../../../redux/profile-reducer\";\r\n\r\n//\r\n// type MyPostsTypeProps = {\r\n//     // store: StoreType\r\n// }\r\n//\r\n// export const MyPostContainer = (props: MyPostsTypeProps) => {\r\n//     // let state = props.store._state\r\n//     //\r\n//     // let addPost = () => {\r\n//     //     props.store.dispatch(addPostAC())\r\n//     // }\r\n//     // let onNewPostTextChange = (newPostText: string) => {\r\n//     //     props.store.dispatch(updateNewPostTextAC(newPostText))\r\n//     // }\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//             (store) => {\r\n//                 let state = store._state;\r\n//\r\n//                 let addPost = () => {\r\n//                     store.dispatch(addPostAC())\r\n//                 }\r\n//                 let onNewPostTextChange = (newPostText: string) => {\r\n//                     store.dispatch(updateNewPostTextAC(newPostText))\r\n//                 }\r\n//                 return <MyPosts addPost={addPost}\r\n//                                 onNewPostTextChange={onNewPostTextChange}\r\n//                                 state={state}/>\r\n//             }\r\n//         }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\ntype MSTP = {\r\n    newPostText: string\r\n    posts: PostType[]\r\n    // profilePage:PostTypeProps\r\n}\r\n\r\ntype MDTP = {\r\n    addPost: (newPostText: string) => void\r\n    // onNewPostTextChange: (newPostText: string) => void\r\n}\r\n\r\nlet mapSteToProps = (state: AppStateType): MSTP => {\r\n    return {\r\n        newPostText: state.profilePage.newPostText,\r\n        posts: state.profilePage.posts\r\n        // profilePage:state.profilePage\r\n    }\r\n\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MDTP => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        },\r\n        // onNewPostTextChange: (newPostText: string) => {\r\n        //     dispatch(updateNewPostTextAC(newPostText))\r\n        // }\r\n    }\r\n}\r\nexport const MyPostContainer = connect<MSTP, MDTP, {}, AppStateType>(mapSteToProps, mapDispatchToProps)(MyPosts);","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport {AddMessageFormContainer} from \"./AddNewPostForm/AddNewPostFormContainer\";\r\n\r\n\r\ntype MyPostsTypeProps = {\r\n    newPostText: string\r\n    posts: PostType[]\r\n    // profilePage:PostTypeProps\r\n    addPost: (newPostText: string) => void\r\n    // onNewPostTextChange: (newPostText: string) => void\r\n}\r\n\r\nexport const MyPosts = (props: MyPostsTypeProps) => {\r\n    let postElements = props.posts.map((p) =>\r\n        <Post\r\n            messages={p.message}\r\n            key={p.id}\r\n            likesCounts={p.likesCounts}/>)\r\n\r\n    // let addPostHandler = () => {\r\n    //     props.addPost()\r\n    // }\r\n    // let onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let text = e.currentTarget.value;\r\n    //     props.onNewPostTextChange(text)\r\n    //     console.log(text)\r\n    // }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            {/*<div>*/}\r\n            {/*    <div><textarea value={props.newPostText} onChange={onChangeHandler}>*/}\r\n            {/*    </textarea></div>*/}\r\n            {/*    <div>*/}\r\n            {/*        <button onClick={addPostHandler}> Add post</button>*/}\r\n            {/*    </div>*/}\r\n            {/*</div>*/}\r\n            <AddMessageFormContainer/>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostContainer} from \"./MyPosts/MyPostContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfileTypeProps = {\r\n  profile:ProfileType\r\n    status:string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport const Profile = (props:ProfileTypeProps) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC}  />\r\n            <MyPostContainer/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Profile} from \"./Profile\";\r\nimport {\r\n    getStatusTC,\r\n    getUsersProfileTC,\r\n    ProfileType,\r\n    setStatus,\r\n    setUserProfile,\r\n    updateStatusTC\r\n} from \"../../redux/profile-reducer\";\r\nimport {toggleIsFetching} from \"../../redux/users-reducer\";\r\nimport {withParams} from \"../../hoc/whithParams\";\r\n\r\n\r\ntype MSTP = {\r\n    profile: ProfileType\r\n    userId?: string\r\n    status: string\r\n    // isAuth:boolean\r\n}\r\ntype MDTP = {\r\n    setUserProfile: (profile: ProfileType) => void\r\n    toggleIsFetching: (isFetch: boolean) => void\r\n    getUsersProfileTC: (userId: string) => void,\r\n    getStatusTC: (userId: string) => void,\r\n    setStatus: (status: string) => void,\r\n    updateStatusTC: (status: string) => void\r\n\r\n}\r\ntype ProfileComponentTypeProps = MSTP & MDTP\r\n\r\n\r\nexport class ProfileComponent extends React.Component<ProfileComponentTypeProps> {\r\n\r\n    componentDidMount() {\r\n\r\n        let userId = this.props.userId\r\n        if (!userId) {\r\n            userId = '20829'\r\n        }\r\n        // if (!userId) {\r\n        //     this.props.history.push()\r\n        // }\r\n        this.props.getUsersProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n\r\n    }\r\n\r\n    render() {\r\n        // if(!this.props.isAuth)return <Navigate to={'/login'}/>\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatusTC={this.props.updateStatusTC}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n// let withAuthNavigateContainer = withAuthNavigate(ProfileComponent)\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status\r\n        // isAuth:state.authMe.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport const ProfileContainer = connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps, {\r\n    setUserProfile,\r\n    toggleIsFetching,\r\n    setStatus,\r\n    getUsersProfileTC,\r\n    getStatusTC,\r\n    updateStatusTC\r\n})(withParams(ProfileComponent))\r\n// export const ProfileContainer = compose<React.ComponentType>(\r\n//     withAuthNavigate,\r\n//     withParams,\r\n//     connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps, {\r\n//         setUserProfile,\r\n//         toggleIsFetching,\r\n//         getUsersProfileTC,\r\n//     })\r\n//     (ProfileComponent))\r\n","import React, {ComponentType} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport function withParams<T>(Component: ComponentType<T>) {\r\n    return (props: T) => {\r\n        const {userId} = useParams();\r\n\r\n        return (\r\n            <Component\r\n                userId={userId}\r\n                {...props}\r\n            />\r\n        );\r\n    };\r\n};\r\n","import React from 'react';\r\nimport style from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype HeaderPropsType = {\r\n    login: string\r\n    isAuth: boolean\r\n    logoutTC:()=>void\r\n}\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    let onLogoutClick= ()=>{\r\n        props.logoutTC()\r\n    }\r\n    return (\r\n\r\n        <header className={style.header}>\r\n            <NavLink to={'/profile'}><img src='https://i.pinimg.com/236x/71/b3/e4/71b3e4159892bb319292ab3b76900930.jpg'\r\n                                          alt={'image'}/></NavLink>\r\n            <div className={style.loginBlock}>\r\n                {props.isAuth ? <div style={{color:\"azure\",}}>{props.login}</div>\r\n                    && <button onClick={onLogoutClick}>Logout</button> : <NavLink to={'/login'}> Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import {AnyAction} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../api/Api\";\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst SET_IS_AUTH = 'SET_IS_AUTH'\r\n\r\n\r\nexport  type AuthMeType = {\r\n    data: {\r\n        login: string,\r\n        id: number,\r\n        email: string\r\n    },\r\n    resultCode: number,\r\n    messages: string[],\r\n    fieldsErrors: string[],\r\n}\r\nexport  type AuthLoginType = {\r\n    resultCode: number,\r\n    messages: string[],\r\n    data: {\r\n        userId: string\r\n    }\r\n}\r\nexport type  InitialStateType = {\r\n    id: number,\r\n    email: string,\r\n    login: string,\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nlet initialState: InitialStateType = {\r\n\r\n    id: 1,\r\n    email: '',\r\n    login: '',\r\n    isAuth: false\r\n}\r\n\r\n\r\nexport const authReducer = (state = initialState, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n        case SET_IS_AUTH:\r\n            return {...state, isAuth: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SetAuthUserDataType = ReturnType<typeof setAuthUserData>\r\nexport const setAuthUserData = (id: number, login: string, email: string) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: {id, login, email}\r\n    } as const\r\n}\r\n\r\nexport type setIsAuthType = ReturnType<typeof setIsAuth>\r\nexport const setIsAuth = (value: boolean) => {\r\n    return {\r\n        type: SET_IS_AUTH,\r\n        value\r\n    } as const\r\n}\r\n//\r\n// export const getAuthUserDataTC = (): AppThunk => {\r\n//     return (dispatch: Dispatch) => {\r\n//         return authAPI.me().then(res => {\r\n//             if (res.data.resultCode === 0) {\r\n//                 let {id, login, email} = res.data.data\r\n//                 dispatch(setAuthUserData(id, login, email))\r\n//             }\r\n//         })\r\n//     }\r\n// }\r\n\r\nexport const getAuthUserDataTC = (): AppThunk => async dispatch => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            let {id, login, email} = res.data.data\r\n            dispatch(setAuthUserData(id, login, email))\r\n        }\r\n    } catch (e:any) {\r\n        throw new Error(e)\r\n    }\r\n}\r\n\r\n\r\nexport const loginTC = (data: LoginParamsType): AppThunk => {\r\n    return (dispatch) => {\r\n        authAPI.login(data).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsAuth(true))\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const logoutTC = (): AppThunk => {\r\n    return (dispatch) => {\r\n        authAPI.logout().then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsAuth(false))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport type AuthActionType = SetAuthUserDataType | setIsAuthType","import React from 'react';\r\nimport {Header} from \"./Header\";\r\nimport {logoutTC} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MSTP = {\r\n    login: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype MDTP = {\r\n    logoutTC: () => void\r\n}\r\n\r\ntype HeaderComponentType = MSTP & MDTP\r\n\r\nclass HeaderComponent extends React.Component<HeaderComponentType> {\r\n    componentDidMount() {\r\n        // axios.get<AuthMeType>(`https://social-network.samuraijs.com/api/1.0/auth/me`,{\r\n        //     withCredentials:true\r\n        // })\r\n        // authAPI.me().then(res => {\r\n        //     if (res.data.resultCode === 0) {\r\n        //         this.props.setAuthUserData(res.data.data)\r\n        //     }\r\n        //\r\n        // })\r\n        // this.props.getAuthUserDataTC()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props} logoutTC={this.props.logoutTC}/>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MSTP => {\r\n    return {\r\n        login: state.authMe.login,\r\n        isAuth: state.authMe.isAuth\r\n    }\r\n}\r\nexport const HeaderContainer = connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps,\r\n    {logoutTC})(HeaderComponent)","import React from \"react\";\r\nimport {Login} from \"./Login\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginTC} from \"../../redux/auth-reducer\";\r\nimport {LoginParamsType} from \"../../api/Api\";\r\n\r\ntype MSTP = {\r\n    isAuth:boolean\r\n}\r\n\r\ntype MDTP = {\r\n    loginTC: (data: LoginParamsType) => void\r\n}\r\n\r\nlet mapSteToProps = (state: AppStateType): MSTP => {\r\n    return {\r\n        isAuth : state.authMe.isAuth\r\n    }\r\n}\r\n\r\nexport const LoginContainer = connect<MSTP, MDTP, {}, AppStateType>(mapSteToProps,\r\n    {loginTC})(Login);\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {LoginParamsType} from \"../../api/Api\";\r\nimport { Navigate } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = (props: { loginTC: (data: LoginParamsType) => void , isAuth:boolean}) => {\r\n    let dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length <= 8) {\r\n                errors.password = 'Must be 8 characters or less';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            // alert(JSON.stringify(values));\r\n            props.loginTC(values)\r\n            formik.resetForm();\r\n        },\r\n    })\r\n    if ( props.isAuth){\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <h1> Login </h1>\r\n                    </FormLabel>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormGroup>\r\n                            <TextField label=\"Email\"\r\n                                       margin=\"normal\"\r\n                                // name=\"email\"\r\n                                // onBlur={formik.handleBlur}\r\n                                // onChange={formik.handleChange}\r\n                                // value={formik.values.email}\r\n                                       {...formik.getFieldProps(\"email\")}/>\r\n                            {formik.touched.email\r\n                            && formik.errors.email\r\n                            && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                            <TextField type=\"password\"\r\n                                       label=\"Password\"\r\n                                       margin=\"normal\"\r\n                                // name=\"password\"\r\n                                // onBlur={formik.handleBlur}\r\n                                // onChange={formik.handleChange}\r\n                                // value={formik.values.password}\r\n                                       {...formik.getFieldProps(\"password\")}/>\r\n                            {formik.touched.password && formik.errors.password\r\n                            && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                            <FormControlLabel label={'Remember me'}\r\n                                              control={<Checkbox\r\n                                                  checked={formik.values.rememberMe}\r\n                                                  name='rememberMe'\r\n                                                  onChange={formik.handleChange}\r\n                                              />}/>\r\n                            <Button type={'submit'} variant={'contained'} color={'secondary'}>\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    )\r\n}","import {getAuthUserDataTC, SetAuthUserDataType} from \"./auth-reducer\";\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\ntype initialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: AppActionType) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SettInitializedSuccessType = ReturnType<typeof InitializedSuccess>\r\nexport const InitializedSuccess = () => {\r\n    return {\r\n        type: INITIALIZED_SUCCESS\r\n    } as const\r\n}\r\n\r\nexport const initializeAppTC = (): AppThunk => {\r\n    return (dispatch: any) => {\r\n        let promise = dispatch(getAuthUserDataTC())\r\n        promise.then(() =>\r\n            dispatch(InitializedSuccess())\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport type AppActionType = SettInitializedSuccessType | SetAuthUserDataType","import React from 'react';\nimport './App.css';\nimport {Navbar} from \"./component/Navbar/Navbar\";\nimport {Route, Routes} from \"react-router-dom\";\nimport {News} from './component/News/News';\nimport {Music} from './component/Music/Music';\nimport {Settings} from \"./component/Settings/Settings\";\nimport {DialogContainer} from \"./component/Dialogs/DialogContainer\";\nimport {UsersContainer} from \"./component/Users/UsersContainer\";\nimport {ProfileContainer} from \"./component/Profile/ProfileContainer\";\nimport {HeaderContainer} from \"./component/Header/HeaderComponent\";\nimport {LoginContainer} from \"./component/Login/LoginContainer\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"./redux/redux-store\";\nimport {initializeAppTC} from \"./redux/app-reducer\";\nimport {Preloader} from \"./common/Preloader\";\n\n\ntype MSTP = {\n    initialized: boolean\n}\n\ntype MDTP = {\n    initializeAppTC: () => void\n}\n\ntype AppPropsType = MSTP & MDTP\n\nclass App extends React.Component<AppPropsType> {\n    componentDidMount() {\n        this.props.initializeAppTC()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Routes>\n                        <Route path={'/profile/:userId'} element={<ProfileContainer/>}/>\n                        <Route path={'/profile/'} element={<ProfileContainer/>}/>\n                        <Route path={'/dialogs'} element={<DialogContainer/>}/>\n                        <Route path={'/users'} element={<UsersContainer/>}/>\n                        <Route path={'/news'} element={<News/>}/>\n                        <Route path={'/music'} element={<Music/>}/>\n                        <Route path={'/settings'} element={<Settings/>}/>\n                        <Route path={'/login'} element={<LoginContainer/>}/>\n                        <Route path={'/404'} element={<h1>404. Page not Found </h1>}/>\n                        {/*<Route path={'*'} element={<Navigate to={'/404'}/>}/>*/}\n                    </Routes>\n                </div>\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = (state: AppStateType): MSTP => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nexport const AppContainer = connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps,\n    {initializeAppTC})(App)\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {ProfileActionType} from \"./profile-reducer\";\r\nimport dialogsReducer, {DialogsActionType} from \"./dialogs-reducer\";\r\nimport usersReducer, {UsersActionType} from \"./users-reducer\";\r\nimport {AuthActionType, authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport {AppActionType, appReducer} from \"./app-reducer\";\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    // sidebar: sidebarReducer\r\n    usersPage: usersReducer,\r\n    authMe: authReducer,\r\n    app: appReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducers>\r\nlet store = createStore(rootReducers, applyMiddleware(thunkMiddleware))\r\n\r\nexport type CommonActionType = UsersActionType|DialogsActionType | AppActionType | AuthActionType | ProfileActionType\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, CommonActionType>\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport {AppContainer} from './App';\nimport {Provider} from \"react-redux\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/redux-store\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n)\n\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2889A\",\"item\":\"Navbar_item__1RaQz\",\"active\":\"Navbar_active__cOjJ_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3uPon\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItems\":\"DialogItem_dialogItems__1VDM_\",\"active\":\"DialogItem_active__kB7lO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"Users_usersPhoto__2yZ-K\",\"selectedPage\":\"Users_selectedPage__1gIoe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__QZ2Kl\",\"posts\":\"MyPosts_posts__1dU_s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__4QSu4\",\"loginBlock\":\"Header_loginBlock__3UM-4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__27M7S\",\"message\":\"Message_message__21cpV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__2IISE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2BVjZ\"};"],"sourceRoot":""}