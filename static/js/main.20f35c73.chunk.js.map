{"version":3,"sources":["component/Navbar/Navbar.tsx","component/News/News.tsx","component/Music/Music.tsx","component/Settings/Settings.tsx","component/Dialogs/DialogItem/DialogItem.tsx","component/Dialogs/Message/Message.tsx","redux/dialogs-reducer.tsx","hoc/withAuthNavigate.tsx","component/Dialogs/DialogContainer.tsx","component/Dialogs/Dialogs.tsx","api/Api.tsx","redux/users-reducer.tsx","assests/images/young-user-icon_5f450e6354e9e.png","component/Users/Users.tsx","assests/images/preloader.gif","common/Preloader.tsx","component/Users/UsersContainer.tsx","component/Profile/ProfileInfo/ProfileStatus.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx","component/Profile/MyPosts/Post/Post.tsx","redux/profile-reducer.tsx","component/Profile/MyPosts/MyPostContainer.tsx","component/Profile/MyPosts/MyPosts.tsx","component/Profile/Profile.tsx","component/Profile/ProfileContainer.tsx","hoc/whithParams.tsx","component/Header/Header.tsx","redux/auth-reducer.tsx","component/Header/HeaderComponent.tsx","component/Login/Login.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.tsx","index.tsx","component/Navbar/Navbar.module.css","component/Dialogs/Dialogs.module.css","component/Dialogs/DialogItem/DialogItem.module.css","component/Users/Users.module.css","component/Profile/MyPosts/MyPosts.module.css","component/Header/Header.module.css","component/Dialogs/Message/Message.module.css","component/Profile/ProfileInfo/ProfileInfo.module.css","component/Profile/MyPosts/Post/Post.module.css"],"names":["Navbar","className","s","nav","item","to","isActive","active","News","Music","Settings","DialogItems","props","dialog","id","name","Messages","message","UPDATE_NEW_MESSAGE_TEXT","SEND_MESSAGE","initialState","dialogs","messages","newMessage","dialogsReducer","state","action","type","body","mapStateToProps","isAuth","authMe","withAuthNavigate","Component","connect","restProps","DialogContainer","dialogsPage","sendMessage","updateNewMessageText","dialogsElement","map","d","messagesElement","m","dialogItems","placeholder","value","onChange","e","currentTarget","onClick","instance","axios","create","baseURL","withCredentials","headers","userAPI","currentPage","pageSize","get","post","profileAPI","userId","status","put","authAPI","data","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOW_PROGRESS","users","totalCount","error","isFetching","followingInProgress","follow","unfollow","setUsers","setTotalUsersCount","toggleIsFetching","setToggleFollowingProgress","usersReducer","u","followed","filter","Users","pageCount","Math","ceil","pages","i","push","p","selectedPage","onPageChange","src","photos","small","userPhoto","alt","usersPhoto","disabled","some","unfollowTC","followTC","Preloader","preloader","UsersAPIComponent","pageNumber","getUsersTC","this","React","UsersContainer","usersPage","setCurrentPage","dispatch","then","res","items","resultCode","ProfileStatus","editMode","activateEditMode","setState","deActivateEditMode","updateStatusTC","onStatusChange","prevProps","prevState","snapshot","console","log","autoFocus","onBlur","onDoubleClick","ProfileInfo","profile","description","large","Post","likesCounts","UPDATE_NEW_POST_TEXT","ADD_POST","SET_USER_PROFILE","SET_STATUS","newPostText","posts","setUserProfile","setStatus","profileReducer","newText","MyPostContainer","profilePage","addPost","onNewPostTextChange","postElements","postsBlock","text","Profile","ProfileComponent","getUsersProfileTC","getStatusTC","ProfileContainer","useParams","Header","style","header","loginBlock","login","SET_USER_DATA","SET_IS_AUTH","email","setAuthUserData","LoginTC","HeaderComponent","getAuthMeTC","HeaderContainer","Login","useDispatch","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","test","length","onSubmit","resetForm","Grid","container","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","color","FormControlLabel","control","Checkbox","checked","handleChange","Button","variant","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.20f35c73.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to='/profile' className={({ isActive }) =>(isActive ?  s.active : \"\")}>Profile</NavLink>\r\n            </div>\r\n            <div  className={s.item}>\r\n                <NavLink to={'/dialogs'} className={({ isActive }) =>(isActive ?  s.active : \"\")}>Messages</NavLink>\r\n            </div>\r\n            <div  className={s.item}>\r\n                <NavLink to={'/users'} className={({ isActive }) =>(isActive ?  s.active : \"\")}>Users</NavLink>\r\n            </div>\r\n            <div  className={s.item}>\r\n                <NavLink to={'/news'} className={({ isActive }) =>(isActive ?  s.active : \"\")}>News</NavLink>\r\n            </div>\r\n            <div  className={s.item}>\r\n                <NavLink to={'/music'} className={({ isActive }) =>(isActive ?  s.active : \"\")}>Music</NavLink>\r\n            </div>\r\n            <div  className={s.item}>\r\n                <NavLink to={'/settings'} className={({ isActive }) =>(isActive ?  s.active : \"\")}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\n\r\nexport const News =()=>{\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\n\r\nexport const Music =()=>{\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\n\r\nexport const Settings =()=>{\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './DialogItem.module.css'\r\n\r\ntype DialogItemsPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItems = (props: DialogItemsPropsType) => {\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={'/dialogs' + props.id}>{props.name}</NavLink>\r\n    </div>\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './Message.module.css'\r\n\r\n\r\ntype MessagesTypeProps = {\r\n    message: string\r\n}\r\nexport const Messages = (props: MessagesTypeProps) => {\r\n    return <div className={s.message}>\r\n        {props.message}\r\n    </div>\r\n}\r\n","const UPDATE_NEW_MESSAGE_TEXT = 'UPDATE_NEW_MESSAGE_TEXT'\r\nconst SEND_MESSAGE = 'SEND_MESSAGE'\r\n\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport  type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsPropsType = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n    newMessage: string\r\n}\r\n\r\nlet initialState: DialogsPropsType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Oleg'},\r\n        {id: 2, name: 'Dimas'},\r\n        {id: 3, name: 'Any'},\r\n        {id: 4, name: 'Ilia'},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'How are you'},\r\n        {id: 2, message: 'How are you'},\r\n        {id: 3, message: 'How are you'},\r\n    ],\r\n    newMessage: \"\"\r\n}\r\n\r\nexport const dialogsReducer = (state= initialState, action: DialogsActionType) => {\r\n    // let stateCopy =  {\r\n    //     ...state,\r\n    //     // messages: [...state.messages]\r\n    // }\r\n    switch (action.type) {\r\n        case SEND_MESSAGE :\r\n            let body = state.newMessage;\r\n            return {\r\n                ...state,\r\n                messages:[...state.messages,{id: 4, message: body}],\r\n                newMessage : ''\r\n            }\r\n        case UPDATE_NEW_MESSAGE_TEXT :\r\n            return {\r\n                ...state,\r\n                newMessage : action.body\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport type DialogsActionType = SendMessageType & UpdateNewMessageTexType\r\nexport type SendMessageType = ReturnType<typeof sendMessage>\r\nexport const sendMessage = () => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    }\r\n}\r\nexport type UpdateNewMessageTexType = ReturnType<typeof updateNewMessageText>\r\nexport const updateNewMessageText = (body: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_TEXT,\r\n        body\r\n    }\r\n}\r\n\r\nexport default dialogsReducer;","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MSTP  = {\r\n    isAuth: boolean\r\n}\r\ntype MDTP = {\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):MSTP => {\r\n    return {\r\n        isAuth: state.authMe.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthNavigate<T>(Component: ComponentType<T>) {\r\n    function NavigateContainer(props: MSTP) {\r\n        let {isAuth,...restProps}=props\r\n        if (!props.isAuth) return <Navigate to={'/login'}/>\r\n        return <Component {...restProps as T }/>\r\n    }\r\n\r\n    return connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps)(NavigateContainer)\r\n\r\n}\r\n","import React from \"react\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {DialogsPropsType, sendMessage, updateNewMessageText} from \"../../redux/dialogs-reducer\";\r\nimport {withAuthNavigate} from \"../../hoc/withAuthNavigate\";\r\nimport {compose} from \"redux\";\r\n//\r\n//\r\n// export type DialogsProps = {\r\n//     // newMessage  : DialogsPropsType\r\n// }\r\n\r\n// export const DialogContainer = (props: DialogsProps) => {\r\n//\r\n// return (\r\n//     <StoreContext.Consumer>\r\n//         {\r\n//             (store: any) => {\r\n//                 let state = store.getState()\r\n//\r\n//                 let onSendMessageClick = () => {\r\n//                     store.dispatch(sendMessageAC())\r\n//                 }\r\n//                 let onUpdateNewMessageChange = (newMessage: string) => {\r\n//                     store.dispatch(updateNewMessageTextAC(newMessage))\r\n//                 }\r\n//                 return <Dialogs state={state}\r\n//                                 onSendMessageClick={onSendMessageClick}\r\n//                                 onUpdateNewMessageChange={onUpdateNewMessageChange}/>\r\n//\r\n//             }\r\n//         }\r\n//     </StoreContext.Consumer>\r\n// )\r\n\r\n\r\n// }\r\n\r\ntype MSTP = {\r\n    dialogsPage: DialogsPropsType\r\n}\r\n\r\n\r\ntype MDTP = {\r\n    sendMessage: () => void\r\n    updateNewMessageText: (newMessage: string) => void\r\n}\r\n\r\nlet mapSteToProps = (state: AppStateType): MSTP => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport const DialogContainer = connect<MSTP, MDTP, {}, AppStateType>(mapSteToProps, {\r\n    sendMessage, updateNewMessageText\r\n\r\n})(withAuthNavigate(Dialogs));\r\n\r\n// export const DialogContainer = compose<React.ComponentType>(\r\n//     connect<MSTP, MDTP, {}, AppStateType>(mapSteToProps, {\r\n//         sendMessage, updateNewMessageText\r\n//     }),\r\n//     withAuthNavigate\r\n//     (Dialogs)\r\n// )\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItems} from \"./DialogItem/DialogItem\";\r\nimport {Messages} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"../../redux/dialogs-reducer\";\r\n\r\nexport type DialogsProps = {\r\n    sendMessage: () => void\r\n    updateNewMessageText: (newMessage: string) => void\r\n    dialogsPage: DialogsPropsType\r\n    isAuth:boolean\r\n\r\n}\r\n\r\nexport const Dialogs = (props: DialogsProps) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElement = state.dialogs.map((d) => <DialogItems key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElement = state.messages.map((m) => <Messages key={m.id} message={m.message}/>)\r\n    let newMessage = state.newMessage\r\n\r\n    let onSendMessageClickHandler = () => {\r\n        props.sendMessage()\r\n\r\n    }\r\n\r\n    let onUpdateNewMessageChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        newMessage = e.currentTarget.value\r\n        props.updateNewMessageText(newMessage)\r\n    }\r\n    // if(!props.isAuth) return <Navigate to={ '/login'}/>\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n                <div>\r\n                    <div>\r\n                        <textarea placeholder='Enter text' value={newMessage}\r\n                                  onChange={onUpdateNewMessageChangeHandler}> </textarea>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={onSendMessageClickHandler}>\r\n                            Send\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport axios, {AxiosResponse} from \"axios\";\r\nimport {ProfileType} from \"../redux/profile-reducer\";\r\nimport {AuthMeType} from \"../redux/auth-reducer\";\r\n\r\n\r\nlet instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '5883697e-1933-44d6-978d-c735fd6eee7a'\r\n    }\r\n})\r\nexport const userAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage} &count${pageSize}`)\r\n    },\r\n    postFollow(id: number) {\r\n        return instance.post(`follow/${id}`)\r\n    },\r\n    deleteUnfollow(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: string) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<AuthMeType>(`auth/me`)\r\n    },\r\n    login(data: LoginParam) {\r\n        return instance.post<LoginParam, AxiosResponse<ResType<{ userId: string }>>>(`/auth/login`, data)\r\n\r\n    }\r\n}\r\n\r\nexport type LoginParam = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type ResType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n};","import {Dispatch} from \"redux\";\r\nimport {userAPI} from \"../api/Api\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_USERS_COUNT'\r\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOW_PROGRESS = 'TOGGLE_FOLLOW_IS_PROGRESS'\r\n\r\n\r\nexport type UsersType = {\r\n    name: string,\r\n    id: number,\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    status: string | null,\r\n    followed: boolean\r\n}\r\n\r\nexport  type UsersTypeProps = {\r\n    users: UsersType[]\r\n    totalCount: number\r\n    error: string\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\nlet initialState: UsersTypeProps = {\r\n    users: [],\r\n    totalCount: 0,\r\n    pageSize: 5,\r\n    currentPage: 1,\r\n    error: '',\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: UsersActionType) => {\r\n    switch (action.type) {\r\n\r\n        case FOLLOW :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case UNFOLLOW :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case SET_USERS :\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE :\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n\r\n        case SET_TOTAL_COUNT:\r\n            return {\r\n                ...state, totalCount: action.totalCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOW_PROGRESS:\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type FollowType = ReturnType<typeof follow>\r\nexport const follow = (userId: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport type UnfollowType = ReturnType<typeof unfollow>\r\nexport const unfollow = (userId: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport type SetUsersType = ReturnType<typeof setUsers>\r\nexport const setUsers = (users: UsersType[]) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    } as const\r\n}\r\n\r\nexport type SetUsersCountType = ReturnType<typeof setCurrentPage>\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    } as const\r\n}\r\n\r\nexport type SetTotalCountType = ReturnType<typeof setTotalUsersCount>\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_COUNT,\r\n        totalCount\r\n    } as const\r\n}\r\n\r\n\r\nexport type ToggleIsFetchingType = ReturnType<typeof toggleIsFetching>\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n}\r\n\r\nexport type SetToggleFollowingProgressType = ReturnType<typeof setToggleFollowingProgress>\r\nexport const setToggleFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n\r\n        type: TOGGLE_IS_FOLLOW_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n}\r\n\r\n\r\nexport const getUsersTC = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        userAPI.getUsers(currentPage, pageSize)\r\n            .then(res => {\r\n                dispatch(toggleIsFetching(false))\r\n                dispatch(setUsers(res.data.items))\r\n                dispatch(setTotalUsersCount(res.data.totalCount))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const followTC = (id: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setToggleFollowingProgress(true, id))\r\n        userAPI.postFollow(id).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                follow(id)\r\n            }\r\n            dispatch(setToggleFollowingProgress(false, id))\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const unfollowTC = (id: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setToggleFollowingProgress(true, id))\r\n        userAPI.postFollow(id).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                unfollow(id)\r\n            }\r\n            dispatch(setToggleFollowingProgress(false, id))\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport type UsersActionType =\r\n    FollowType\r\n    | UnfollowType\r\n    | SetUsersType\r\n    | SetUsersCountType\r\n    | SetTotalCountType\r\n    | ToggleIsFetchingType\r\n    | SetToggleFollowingProgressType\r\n\r\nexport default usersReducer;\r\n","export default __webpack_public_path__ + \"static/media/young-user-icon_5f450e6354e9e.4ce1ce10.png\";","import React from \"react\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport userPhoto from './../../assests/images/young-user-icon_5f450e6354e9e.png'\r\nimport s from './Users.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype UsersTypeProps = {\r\n    users: UsersType[]\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChange: (pageNumber: number) => void\r\n    setToggleFollowingProgress: (isFetch: boolean,userId:number) => void\r\n    followingInProgress: number[]\r\n    isFetching: boolean\r\n    followTC : (id: number) =>void\r\n    unfollowTC : (id: number) =>void\r\n\r\n}\r\n\r\nexport const Users = (props: UsersTypeProps) => {\r\n\r\n    let pageCount = Math.ceil(props.totalCount / props.pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {\r\n                    pages.map(p => {\r\n                        return <span\r\n                            className={props.currentPage === p ? s.selectedPage : ''}\r\n                            onClick={() => {\r\n                                props.onPageChange(p)\r\n                            }\r\n                            }>{p + '...'}</span>\r\n                    })\r\n                }\r\n            </div>\r\n            {\r\n                props.users.map(u =>\r\n                    <div key={u.id}>\r\n                      <span>\r\n                          <div>\r\n                              <NavLink to={'/profile/' + u.id}> <img key={u.id}\r\n                                                                     src={u.photos.small !== null\r\n                                                                         ? u.photos.small\r\n                                                                         : userPhoto}\r\n                                                                     alt={'image'}\r\n                                                                     className={s.usersPhoto}\r\n                              /></NavLink>\r\n                          </div>\r\n                          <div>\r\n                              {u.followed\r\n                                  ? <button disabled={props.followingInProgress.some(id=> id===u.id)}\r\n                                            onClick={() => {\r\n                                                props.unfollowTC(u.id)\r\n                                                // props.setToggleFollowingProgress(true,u.id)\r\n                                                // // axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,\r\n                                                // //     {\r\n                                                // //         withCredentials: true,\r\n                                                // //         headers: {\r\n                                                // //             'API-KEY': '5883697e-1933-44d6-978d-c735fd6eee7a'\r\n                                                // //         }\r\n                                                // //     })\r\n                                                //\r\n                                                // userAPI.deleteUnfollow(u.id).then(res => {\r\n                                                //     if (res.data.resultCode === 0) {\r\n                                                //         props.unfollow(u.id)\r\n                                                //     }\r\n                                                //     props.setToggleFollowingProgress(false,u.id)\r\n                                                // })\r\n\r\n                                            }}>Unfollow</button>\r\n                                  : <button disabled={props.followingInProgress.some(id=> id===u.id)}\r\n                                            onClick={() => {\r\n                                                props.followTC(u.id)\r\n                                                // props.setToggleFollowingProgress(true,u.id)\r\n                                                // //     axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,\r\n                                                // // {}, {\r\n                                                // //     withCredentials: true,\r\n                                                // //     headers: {\r\n                                                // //     'API-KEY': '5883697e-1933-44d6-978d-c735fd6eee7a'\r\n                                                // // }\r\n                                                // // })\r\n                                                // userAPI.postFollow(u.id).then(res => {\r\n                                                //     if (res.data.resultCode === 0) {\r\n                                                //         props.follow(u.id)\r\n                                                //     }\r\n                                                //     props.setToggleFollowingProgress(false,u.id)\r\n                                                // })\r\n\r\n                                            }}>Follow</button>\r\n                              }\r\n                                  </div>\r\n                                  </span>\r\n                        <span>\r\n                                  <span>\r\n                                  <div>{u.name}</div>\r\n                                  <div>{u.status}</div>\r\n                                  </span>\r\n                                  <span>\r\n                                  <div>{\"u.location.city\"}</div>\r\n                                  <div>{\"u.location.country\"}</div>\r\n                                  </span>\r\n                                  </span>\r\n                    </div>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/preloader.c7d9f081.gif\";","import React from \"react\";\r\nimport preloader from \"../assests/images/preloader.gif\";\r\n\r\ntype PreloaderPropsType = {}\r\n\r\nexport let Preloader = (props: PreloaderPropsType) => {\r\n    return <div>\r\n        <img src={preloader} alt={''}/>\r\n    </div>\r\n\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    follow,\r\n    followTC,\r\n    getUsersTC,\r\n    setCurrentPage,\r\n    setToggleFollowingProgress,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleIsFetching,\r\n    unfollow,\r\n    unfollowTC,\r\n    UsersType\r\n} from \"../../redux/users-reducer\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../../common/Preloader\";\r\nimport {withAuthNavigate} from \"../../hoc/withAuthNavigate\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MSTP = {\r\n    users: UsersType[]\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\ntype MDTP = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: UsersType[]) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalUserCount: number) => void\r\n    toggleIsFetching: (isFetch: boolean) => void\r\n    setToggleFollowingProgress: (isFetch: boolean, userId: number) => void\r\n    getUsersTC: (currentPage: number, pageSize: number) => void\r\n    followTC: (id: number) => void\r\n    unfollowTC: (id: number) => void\r\n}\r\nexport type UsersAPITypeProps = MDTP & MSTP\r\n\r\nexport class UsersAPIComponent extends React.Component<UsersAPITypeProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersTC(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChange = (pageNumber: number) => {\r\n        this.props.getUsersTC(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        // if (!this.props.isAuth) return <Navigate to={'/login'}/>\r\n        return <>\r\n            <div>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n            </div>\r\n            <Users onPageChange={this.onPageChange}\r\n                   currentPage={this.props.currentPage}\r\n                   pageSize={this.props.pageSize}\r\n                   totalCount={this.props.totalCount}\r\n                   unfollow={this.props.unfollow}\r\n                   follow={this.props.follow}\r\n                   users={this.props.users}\r\n                   setToggleFollowingProgress={this.props.setToggleFollowingProgress}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   isFetching={this.props.isFetching}\r\n                   followTC={this.props.followTC}\r\n                   unfollowTC={this.props.unfollowTC}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MSTP => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        totalCount: state.usersPage.totalCount,\r\n        pageSize: state.usersPage.pageSize,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}\r\nexport const UsersContainer = connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps,\r\n    {\r\n        follow, unfollow, setUsers,\r\n        setCurrentPage, setTotalUsersCount, toggleIsFetching,\r\n        setToggleFollowingProgress, getUsersTC, followTC, unfollowTC\r\n    })(withAuthNavigate(UsersAPIComponent))\r\n// export const UsersContainer = compose<React.ComponentType>(\r\n//     withAuthNavigate,\r\n//     connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps,\r\n//         {\r\n//             follow, unfollow, setUsers,\r\n//             setCurrentPage, setTotalUsersCount, toggleIsFetching,\r\n//             setToggleFollowingProgress, getUsersTC, followTC, unfollowTC\r\n//         }),\r\n//     (UsersAPIComponent))","import React, {ChangeEvent} from \"react\";\r\n\r\ntype ProfileStatusTypeProps = {\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusTypeProps> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState(\r\n            {editMode: true})\r\n    }\r\n\r\n    deActivateEditMode = () => {\r\n        this.setState(\r\n            {editMode: false})\r\n        this.props.updateStatusTC(this.state.status)\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState(\r\n            {status: e.currentTarget.value})\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusTypeProps>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.status !== this.props.status){\r\n            this.setState(\r\n                {status: this.props.status})\r\n        }\r\n\r\n        console.log('componentDidUpdate')\r\n    }\r\n\r\n    render() {\r\n        console.log('render')\r\n        return <div>\r\n\r\n            {!this.state.editMode ?\r\n                <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"----\"}</span>\r\n                </div>\r\n                : <div>\r\n                    <input autoFocus={true} onBlur={this.deActivateEditMode} onChange={this.onStatusChange}\r\n                           value={this.state.status}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Preloader} from \"../../../common/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile:ProfileType\r\n    status:string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo = (props:ProfileInfoPropsType) => {\r\n    if(!props.profile){\r\n      return   <Preloader/>\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div>\r\n                {/*<img src='https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__480.jpg' alt={'images'}/>*/}\r\n                <div className={s.description}>\r\n                    <NavLink to={'/profile'}>\r\n                       <img src={props.profile.photos.large} alt={'profile photo'}/>\r\n                        </NavLink>\r\n                    <div>\r\n                        <ProfileStatus  status={props.status}  updateStatusTC={props.updateStatusTC} />\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype  PostPropsType = {\r\n    messages: string\r\n    likesCounts: number\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTFb5fMw2UHXHnnNcW6t2Dpa7A_Ubc-9sTvEA&usqp=CAU'} alt={'photo'}/>\r\n            {props.messages}\r\n            <div>\r\n                <span>like</span> {props.likesCounts}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {profileAPI} from \"../api/Api\";\r\n\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_ TEXT'\r\nconst ADD_POST = 'ADD_POST'\r\nconst SET_USER_PROFILE = 'SET_USERS_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        facebook: string,\r\n        \"website\": null,\r\n        \"vk\": string,\r\n        \"twitter\": string,\r\n        \"instagram\": string,\r\n        \"youtube\": null,\r\n        \"github\": string,\r\n        \"mainLink\": null\r\n    },\r\n    \"lookingForAJob\": true,\r\n    \"lookingForAJobDescription\": string,\r\n    \"fullName\": string,\r\n    \"userId\": number,\r\n    \"photos\": {\r\n        \"small\": string,\r\n        \"large\": string\r\n    }\r\n} | null\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCounts: number\r\n}\r\n\r\nexport type PostTypeProps = {\r\n    posts: PostType[]\r\n    newPostText: string\r\n    profile: ProfileType\r\n    status: string\r\n}\r\n\r\nlet initialState: PostTypeProps = {\r\n    newPostText: \"\",\r\n    posts: [\r\n        {id: 1, message: 'Hi my friend', likesCounts: 20},\r\n        {id: 2, message: 'How are you', likesCounts: 15},\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionType) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST :\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: 5, message: state.newPostText, likesCounts: 12,}],\r\n                newPostText: ''\r\n            }\r\n\r\n        case UPDATE_NEW_POST_TEXT :\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        case SET_USER_PROFILE :\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_STATUS :\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n\r\n        default  :\r\n            return state\r\n    }\r\n}\r\nexport type AddPostType = ReturnType<typeof addPostAC>\r\nexport const addPostAC = () => {\r\n    return {\r\n        type: ADD_POST\r\n    }\r\n}\r\n\r\nexport type UpdateNewPostTexType = ReturnType<typeof updateNewPostTextAC>\r\nexport const updateNewPostTextAC = (newText: string) => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        newText\r\n    }\r\n}\r\n\r\nexport type SetUserProfileType = ReturnType<typeof setUserProfile>\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    }\r\n}\r\nexport type SetStatusType = ReturnType<typeof setStatus>\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    }\r\n}\r\n\r\n\r\nexport const getUsersProfileTC = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getUserProfile(userId).then(res => {\r\n            dispatch(setUserProfile(res.data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const getStatusTC = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getStatus(userId).then(res => {\r\n            dispatch(setStatus(res.data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateStatusTC = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatus(status).then(res => {\r\n            if (res.data.resultCode === 0){\r\n                dispatch(setStatus(status))\r\n            }\r\n        })\r\n    }\r\n}\r\nexport type ProfileActionType = AddPostType & UpdateNewPostTexType & SetUserProfileType & SetStatusType\r\nexport default profileReducer;","import React from 'react';\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostAC, PostType, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\r\n\r\n//\r\n// type MyPostsTypeProps = {\r\n//     // store: StoreType\r\n// }\r\n//\r\n// export const MyPostContainer = (props: MyPostsTypeProps) => {\r\n//     // let state = props.store._state\r\n//     //\r\n//     // let addPost = () => {\r\n//     //     props.store.dispatch(addPostAC())\r\n//     // }\r\n//     // let onNewPostTextChange = (newPostText: string) => {\r\n//     //     props.store.dispatch(updateNewPostTextAC(newPostText))\r\n//     // }\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//             (store) => {\r\n//                 let state = store._state;\r\n//\r\n//                 let addPost = () => {\r\n//                     store.dispatch(addPostAC())\r\n//                 }\r\n//                 let onNewPostTextChange = (newPostText: string) => {\r\n//                     store.dispatch(updateNewPostTextAC(newPostText))\r\n//                 }\r\n//                 return <MyPosts addPost={addPost}\r\n//                                 onNewPostTextChange={onNewPostTextChange}\r\n//                                 state={state}/>\r\n//             }\r\n//         }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\ntype MSTP = {\r\n    newPostText: string\r\n    posts: PostType[]\r\n    // profilePage:PostTypeProps\r\n}\r\n\r\ntype MDTP = {\r\n    addPost: () => void\r\n    onNewPostTextChange: (newPostText: string) => void\r\n}\r\n\r\nlet mapSteToProps = (state: AppStateType): MSTP => {\r\n    return {\r\n        newPostText: state.profilePage.newPostText,\r\n        posts: state.profilePage.posts\r\n        // profilePage:state.profilePage\r\n    }\r\n\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MDTP => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(addPostAC())\r\n        },\r\n        onNewPostTextChange: (newPostText: string) => {\r\n            dispatch(updateNewPostTextAC(newPostText))\r\n        }\r\n    }\r\n}\r\nexport const MyPostContainer = connect<MSTP, MDTP, {}, AppStateType>(mapSteToProps, mapDispatchToProps)(MyPosts);","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\n\r\n\r\ntype MyPostsTypeProps = {\r\n    newPostText: string\r\n    posts: PostType[]\r\n    // profilePage:PostTypeProps\r\n    addPost: () => void\r\n    onNewPostTextChange: (newPostText: string) => void\r\n}\r\n\r\nexport const MyPosts = (props: MyPostsTypeProps) => {\r\n    // let state = props.profilePage\r\n\r\n    let postElements = props.posts.map((p) =>\r\n        <Post\r\n        messages={p.message}\r\n        key={p.id}\r\n        likesCounts={p.likesCounts}/>)\r\n\r\n    let addPostHandler = () => {\r\n        props.addPost()\r\n    }\r\n    let onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.currentTarget.value;\r\n        props.onNewPostTextChange(text)\r\n        console.log(text)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div><textarea value={props.newPostText} onChange={onChangeHandler}>\r\n                </textarea></div>\r\n                <div>\r\n                    <button onClick={addPostHandler}> Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostContainer} from \"./MyPosts/MyPostContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfileTypeProps = {\r\n  profile:ProfileType\r\n    status:string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport const Profile = (props:ProfileTypeProps) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC}  />\r\n            <MyPostContainer/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Profile} from \"./Profile\";\r\nimport {\r\n    getStatusTC,\r\n    getUsersProfileTC,\r\n    ProfileType,\r\n    setStatus,\r\n    setUserProfile,\r\n    updateStatusTC\r\n} from \"../../redux/profile-reducer\";\r\nimport {toggleIsFetching} from \"../../redux/users-reducer\";\r\nimport {withParams} from \"../../hoc/whithParams\";\r\n\r\ntype MSTP = {\r\n    profile: ProfileType\r\n    userId?: string\r\n    status: string\r\n    // isAuth:boolean\r\n}\r\ntype MDTP = {\r\n    setUserProfile: (profile: ProfileType) => void\r\n    toggleIsFetching: (isFetch: boolean) => void\r\n    getUsersProfileTC: (userId: string) => void,\r\n    getStatusTC: (userId: string) => void,\r\n    setStatus: (status: string) => void,\r\n    updateStatusTC: (status: string) => void\r\n\r\n}\r\ntype ProfileComponentTypeProps = MSTP & MDTP\r\n\r\nexport class ProfileComponent extends React.Component<ProfileComponentTypeProps> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.userId\r\n        if (!userId) {\r\n            userId = '20829'\r\n        }\r\n        this.props.getUsersProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n\r\n    }\r\n\r\n    render() {\r\n        // if(!this.props.isAuth)return <Navigate to={'/login'}/>\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatusTC={this.props.updateStatusTC}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n// let withAuthNavigateContainer = withAuthNavigate(ProfileComponent)\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status\r\n        // isAuth:state.authMe.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport const ProfileContainer = connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps, {\r\n    setUserProfile,\r\n    toggleIsFetching,\r\n    setStatus,\r\n    getUsersProfileTC,\r\n    getStatusTC,\r\n    updateStatusTC\r\n})(withParams(ProfileComponent))\r\n// export const ProfileContainer = compose<React.ComponentType>(\r\n//     withAuthNavigate,\r\n//     withParams,\r\n//     connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps, {\r\n//         setUserProfile,\r\n//         toggleIsFetching,\r\n//         getUsersProfileTC,\r\n//     })\r\n//     (ProfileComponent))\r\n","import React, {ComponentType} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport function withParams<T>(Component: ComponentType<T>) {\r\n    return (props: T) => {\r\n        const {userId} = useParams();\r\n\r\n        return (\r\n            <Component\r\n                userId={userId}\r\n                {...props}\r\n            />\r\n        );\r\n    };\r\n};\r\n","import React from 'react';\r\nimport style from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype HeaderPropsType = {\r\n    login: string\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    return (\r\n\r\n        <header className={style.header}>\r\n            <NavLink to={'/profile'}><img src='https://i.pinimg.com/236x/71/b3/e4/71b3e4159892bb319292ab3b76900930.jpg'\r\n                                          alt={'image'}/></NavLink>\r\n            <div className={style.loginBlock}>\r\n                {props.isAuth ? props.login : <NavLink to={'/login'}> Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/Api\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst SET_IS_AUTH = 'SET_IS_AUTH'\r\n\r\nexport  type AuthMeType = {\r\n    data: {\r\n        login: string,\r\n        id: number,\r\n        email: string\r\n    },\r\n    resultCode: number,\r\n    messages: string[],\r\n    fieldsErrors: string[],\r\n}\r\n\r\nexport  type AuthLoginType = {\r\n    resultCode: number,\r\n    messages: string[],\r\n    data: {\r\n        userId: string\r\n    }\r\n}\r\n\r\nexport type  InitialStateType = {\r\n    id: number,\r\n    email: string,\r\n    login: string,\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n\r\n    id: 1,\r\n    email: '',\r\n    login: '',\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n        case SET_IS_AUTH:\r\n            return {...state, isAuth: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SetAuthUserDataType = ReturnType<typeof setAuthUserData>\r\nexport const setAuthUserData = (id: number, login: string, email: string) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: {id, login, email}\r\n    } as const\r\n}\r\nexport type setIsAuthType = ReturnType<typeof setIsAuth>\r\nexport const setIsAuth = (value: boolean) => {\r\n    return {\r\n        type: SET_IS_AUTH,\r\n        value\r\n    } as const\r\n}\r\n\r\nexport const getAuthMeTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.me().then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                let {id, login, email} = res.data.data\r\n                dispatch(setAuthUserData(id, login, email))\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const LoginTC = (data: any) => {\r\n    return (dispatch: Dispatch) => {\r\n        debugger\r\n        authAPI.login(data).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsAuth(true))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport type AuthActionType = SetAuthUserDataType | setIsAuthType","import React from 'react';\r\nimport {Header} from \"./Header\";\r\nimport {getAuthMeTC, setAuthUserData} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MSTP = {\r\n    login: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype MDTP = {\r\n    setAuthUserData: (id: number, login: string, email: string) => void\r\n    getAuthMeTC: () => void\r\n}\r\n\r\ntype HeaderComponentType = MSTP & MDTP\r\n\r\nclass HeaderComponent extends React.Component<HeaderComponentType> {\r\n    componentDidMount() {\r\n        // axios.get<AuthMeType>(`https://social-network.samuraijs.com/api/1.0/auth/me`,{\r\n        //     withCredentials:true\r\n        // })\r\n        // authAPI.me().then(res => {\r\n        //     if (res.data.resultCode === 0) {\r\n        //         this.props.setAuthUserData(res.data.data)\r\n        //     }\r\n        //\r\n        // })\r\n        this.props.getAuthMeTC();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props} />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MSTP => {\r\n    return {\r\n        login: state.authMe.login,\r\n        isAuth: state.authMe.isAuth\r\n    }\r\n}\r\nexport const HeaderContainer = connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps,\r\n    {setAuthUserData, getAuthMeTC})(HeaderComponent)","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {LoginTC} from \"../../redux/auth-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    let dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length <= 8) {\r\n                errors.password = 'Must be 8 characters or less';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            // alert(JSON.stringify(values));\r\n            dispatch(LoginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <h1> Login </h1>\r\n                    </FormLabel>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormGroup>\r\n                            <TextField label=\"Email\"\r\n                                       margin=\"normal\"\r\n                                // name=\"email\"\r\n                                // onBlur={formik.handleBlur}\r\n                                // onChange={formik.handleChange}\r\n                                // value={formik.values.email}\r\n                                       {...formik.getFieldProps(\"email\")}/>\r\n                            {formik.touched.email\r\n                            && formik.errors.email\r\n                            && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                            <TextField type=\"password\"\r\n                                       label=\"Password\"\r\n                                       margin=\"normal\"\r\n                                // name=\"password\"\r\n                                // onBlur={formik.handleBlur}\r\n                                // onChange={formik.handleChange}\r\n                                // value={formik.values.password}\r\n                                       {...formik.getFieldProps(\"password\")}/>\r\n                            {formik.touched.password && formik.errors.password\r\n                            && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                            <FormControlLabel label={'Remember me'}\r\n                                              control={<Checkbox\r\n                                                  checked={formik.values.rememberMe}\r\n                                                  name='rememberMe'\r\n                                                  onChange={formik.handleChange}\r\n                                              />}/>\r\n                            <Button type={'submit'} variant={'contained'} color={'secondary'}>\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Navbar} from \"./component/Navbar/Navbar\";\nimport {Navigate, Route, Routes} from \"react-router-dom\";\nimport {News} from './component/News/News';\nimport {Music} from './component/Music/Music';\nimport {Settings} from \"./component/Settings/Settings\";\nimport {DialogContainer} from \"./component/Dialogs/DialogContainer\";\nimport {UsersContainer} from \"./component/Users/UsersContainer\";\nimport {ProfileContainer} from \"./component/Profile/ProfileContainer\";\nimport {HeaderContainer} from \"./component/Header/HeaderComponent\";\nimport { Login } from './component/Login/Login';\n\n\nconst App = () => {\n\n    return (\n        <div className=\"app-wrapper\">\n            <HeaderContainer/>\n            <Navbar/>\n            <div className='app-wrapper-content'>\n                <Routes>\n                    <Route path={'/profile/:userId'} element={<ProfileContainer/>}/>\n                    <Route path={'/profile/'} element={<ProfileContainer/>}/>\n                    <Route path={'/dialogs'} element={<DialogContainer/>}/>\n                    <Route path={'/users'} element={<UsersContainer/>}/>\n                    <Route path={'/news'} element={<News/>}/>\n                    <Route path={'/music'} element={<Music/>}/>\n                    <Route path={'/settings'} element={<Settings/>}/>\n                    <Route path={'/login'} element={<Login/>}/>\n                    <Route path={'/404'} element={<h1>404. Page not Found </h1>}/>\n                    <Route path={'*'} element={<Navigate to={'/404'}/>}/>\n\n\n                </Routes>\n            </div>\n        </div>\n    );\n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport  thunkMiddleware from \"redux-thunk\"\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    // sidebar: sidebarReducer\r\n    usersPage: usersReducer,\r\n    authMe: authReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducers>\r\nlet store = createStore(rootReducers, applyMiddleware(thunkMiddleware))\r\n//@ts-ignore\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/redux-store\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n)\n\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2889A\",\"item\":\"Navbar_item__1RaQz\",\"active\":\"Navbar_active__cOjJ_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3uPon\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItems\":\"DialogItem_dialogItems__1VDM_\",\"active\":\"DialogItem_active__kB7lO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"Users_usersPhoto__2yZ-K\",\"selectedPage\":\"Users_selectedPage__1gIoe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__QZ2Kl\",\"posts\":\"MyPosts_posts__1dU_s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__4QSu4\",\"loginBlock\":\"Header_loginBlock__3UM-4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__27M7S\",\"message\":\"Message_message__21cpV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__2IISE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2BVjZ\"};"],"sourceRoot":""}